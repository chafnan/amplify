// Generated by CoffeeScript 1.6.3
(function() {
  var callRequest, define, http, https, isSecure, onError, onSuccess, replacePathTemplates, request, requestFunction, resources, url, utils, writeData;

  http = require('http');

  https = require('https');

  url = require('url');

  utils = require('./utils');

  this.settings;

  this.resource;

  resources = {};

  isSecure = function(protocol) {
    return protocol === 'https';
  };

  onSuccess = function(data) {
    if (this.resource.settings.dataType === 'json') {
      data = JSON.parse(data);
    }
    if (this.settings.success != null) {
      return this.settings.success(data, 'success');
    }
  };

  onError = function(error) {
    if (this.settings.error != null) {
      return this.settings.error(error, 'error');
    }
  };

  writeData = function(req) {
    if ((this.settings.data == null) && this.settings.data !== {} && this.settings.data !== void 0) {
      return req.write(this.settings.data);
    }
  };

  requestFunction = function(res) {
    var data;
    data = '';
    res.on('data', function(chunk) {
      return data += chunk;
    });
    res.on('end', function() {
      return onSuccess(data);
    });
    return res.on('error', function(err) {
      return onError(err);
    });
  };

  callRequest = function(options, isSecure) {
    var req;
    req = null;
    if (isSecure) {
      req = https.request(options, requestFunction);
    } else {
      req = http.request(options, requestFunction);
    }
    req.on('error', function(err) {
      return onError(err);
    });
    writeData(req);
    return req.end();
  };

  replacePathTemplates = function(pathname) {
    var match, matches, path, prop, replaceValue, _i, _len, _ref;
    path = pathname;
    matches = path.match(/{[\w\d]*}/g);
    if (matches == null) {
      return path;
    }
    for (_i = 0, _len = matches.length; _i < _len; _i++) {
      match = matches[_i];
      prop = match.replace('{', '').replace('}', '');
      replaceValue = (_ref = this.settings) != null ? _ref.data[prop] : void 0;
      if (replaceValue != null) {
        path = path.replace(match, replaceValue);
      }
    }
    return path;
  };

  request = function(resourceId, data, callback) {
    var options, urlParts;
    this.settings = resourceId || {};
    if (utils.isType(resourceId, 'string')) {
      if (utils.isType(data, 'function')) {
        callback = data;
        data = {};
      }
      this.settings = {
        resourceId: resourceId,
        data: data || {},
        success: callback
      };
    }
    this.resource = resources[this.settings.resourceId];
    if (this.resource == null) {
      throw "unknown resourceId: " + this.settings.resourceId;
    }
    urlParts = url.parse(this.resource.settings.url);
    options = {
      hostname: urlParts.hostname,
      port: urlParts.port,
      path: replacePathTemplates(urlParts.pathname),
      method: this.resource.settings.type
    };
    return callRequest(options, isSecure(urlParts));
  };

  define = function(resourceId, type, settings) {
    return resources[resourceId] = {
      type: type,
      settings: settings
    };
  };

  exports.request = request;

  exports.request.define = define;

}).call(this);
